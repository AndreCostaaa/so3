diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/build.conf ./build.conf
--- ../base/so3/build.conf	2023-10-10 20:01:16.400180635 +0200
+++ ./build.conf	2023-10-12 15:53:40.568091859 +0200
@@ -1,2 +1,2 @@
-PLATFORM := virt32
+PLATFORM := virt64
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/deploy.sh ./deploy.sh
--- ../base/so3/deploy.sh	2023-10-10 20:01:16.400180635 +0200
+++ ./deploy.sh	2023-10-12 15:53:40.569091836 +0200
@@ -76,11 +76,11 @@
     
 # Check if the rootfs has been redeployed (in partition #1 currently). In this case, the contents must be preserved.
     if [ "$deploy_rootfs" != "y" ]; then
-    sudo rm -rf fs/*
+    rm -rf fs/*
     fi
     
-    [ -f ../target/${PLATFORM}.itb ] && sudo cp ../target/${PLATFORM}.itb fs/ && echo ITB deployed.
-    sudo cp ../u-boot/uEnv.d/uEnv_${PLATFORM}.txt fs/uEnv.txt
+    [ -f ../target/${PLATFORM}.itb ] && cp ../target/${PLATFORM}.itb fs/ && echo ITB deployed.
+    cp ../u-boot/uEnv.d/uEnv_${PLATFORM}.txt fs/uEnv.txt
        
     if [ "$PLATFORM" == "virt32" -o "$PLATFORM" == "vexpress" -o "$PLATFORM" == "virt64" ]; then
 	# Nothing else ...
@@ -89,15 +89,15 @@
     fi
  
     if [ "$PLATFORM" == "rpi4" ]; then
-        sudo cp -r ../bsp/rpi4/* fs/
-        sudo cp ../u-boot/u-boot.bin fs/kernel7.img
+        cp -r ../bsp/rpi4/* fs/
+        cp ../u-boot/u-boot.bin fs/kernel7.img
         ./umount.sh
         cd ..
     fi
     
     if [ "$PLATFORM" == "rpi4_64" ]; then
-        sudo cp -r ../bsp/rpi4/* fs/
-        sudo cp ../u-boot/u-boot.bin fs/kernel8.img
+        cp -r ../bsp/rpi4/* fs/
+        cp ../u-boot/u-boot.bin fs/kernel8.img
         ./umount.sh
         cd ..
     fi
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/filesystem/create_img.sh ./filesystem/create_img.sh
--- ../base/so3/filesystem/create_img.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./filesystem/create_img.sh	2023-10-12 15:53:40.569091836 +0200
@@ -14,7 +14,7 @@
     echo Creating sdcard.img.$1 ... 
     dd_size=256M
     dd if=/dev/zero of=sdcard.img.$1 bs="$dd_size" count=1
-    devname=$(sudo losetup --partscan --find --show sdcard.img.$1)
+    devname=$(losetup --partscan --find --show sdcard.img.$1)
 
     # Keep device name only without /dev/
     devname=${devname#"/dev/"}
@@ -27,7 +27,7 @@
 
 if [ "$1" == "virt32" -o "$1" == "rpi4" -o "$1" == "rpi4_64" -o "$1" == "virt64" ]; then
 #create the partition layout this way
-    (echo o; echo n; echo p; echo; echo; echo; echo t; echo c; echo w) | sudo fdisk /dev/"$devname";
+    (echo o; echo n; echo p; echo; echo; echo; echo t; echo c; echo w) | fdisk /dev/"$devname";
 fi
 
 echo Waiting...
@@ -38,10 +38,10 @@
     export devname="${devname}p"
 fi
 
-sudo mkfs.fat -F32 -v /dev/"$devname"1
-sudo mkfs.ext4 /dev/"$devname"2
+mkfs.fat -F32 -v /dev/"$devname"1
+mkfs.ext4 /dev/"$devname"2
 
 if [ "$1" == "virt32" -o "$1" == "virt64" ]; then
-	sudo losetup -D
+	losetup -D
 fi
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/filesystem/mount.sh ./filesystem/mount.sh
--- ../base/so3/filesystem/mount.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./filesystem/mount.sh	2023-10-12 15:53:40.569091836 +0200
@@ -10,18 +10,18 @@
     PLATFORM=$2
 fi
 
-sudo rm -rf fs/*
+rm -rf fs/*
 mkdir -p fs
  
 if [ "$PLATFORM" == "virt32" -o "$PLATFORM" == "virt64" ]; then
-    devname=$(sudo losetup --partscan --find --show sdcard.img.${PLATFORM})
+    devname=$(losetup --partscan --find --show sdcard.img.${PLATFORM})
     FS_IMG=sdcard.img.${PLATFORM}
 
     #sudo losetup -P --find --show flash
-   
+
 
     # device is loopback (loop<n>)
-    sudo mount ${devname}p$1 fs 
+    mount ${devname}p$1 fs
     exit 0
 fi
 
@@ -35,5 +35,5 @@
 fi
 
 if [ "$PLATFORM" == "rpi4" -o "$PLATFORM" == "rpi4_64" ]; then
-    sudo mount /dev/"${devname}"$1 fs
+    mount /dev/"${devname}"$1 fs
 fi
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/filesystem/post_installation_done ./filesystem/post_installation_done
--- ../base/so3/filesystem/post_installation_done	1970-01-01 01:00:00.000000000 +0100
+++ ./filesystem/post_installation_done	2023-10-12 15:53:40.569091836 +0200
@@ -0,0 +1 @@
+OK
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/filesystem/umount.sh ./filesystem/umount.sh
--- ../base/so3/filesystem/umount.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./filesystem/umount.sh	2023-10-12 15:53:40.569091836 +0200
@@ -12,11 +12,11 @@
 
 sleep 1
 
-sudo umount fs
+umount fs
 
 # Let the filesystem be synchronized
 sleep 1
 
 if [ "$PLATFORM" == "virt32" -o "$PLATFORM" == "virt64" ]; then
-    sudo losetup -D
+    losetup -D
 fi
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/rootfs/deploy.sh ./rootfs/deploy.sh
--- ../base/so3/rootfs/deploy.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./rootfs/deploy.sh	2023-10-12 15:53:40.570091813 +0200
@@ -15,8 +15,8 @@
 ./mount.sh
 cd ../filesystem
 ./mount.sh 1
-sudo rm -rf fs/*
-sudo cp -rf ../rootfs/fs/* fs/
+rm -rf fs/*
+cp -rf ../rootfs/fs/* fs/
 
 # Sometimes, syncing between RAM and FS takes some time
 sleep 1
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/rootfs/mount.sh ./rootfs/mount.sh
--- ../base/so3/rootfs/mount.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./rootfs/mount.sh	2023-10-12 16:09:08.479819785 +0200
@@ -5,6 +5,6 @@
 # mount the rootfs
 mkdir -p fs
 
-DEVLOOP=$(sudo losetup --partscan --find --show ./rootfs.fat)
+DEVLOOP=$(losetup --partscan --find --show ./rootfs.fat)
 
-sudo mount ${DEVLOOP}p1 fs
+mount ${DEVLOOP}p1 fs
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/rootfs/umount.sh ./rootfs/umount.sh
--- ../base/so3/rootfs/umount.sh	2023-10-10 20:01:16.409180435 +0200
+++ ./rootfs/umount.sh	2023-10-12 16:08:48.426281712 +0200
@@ -1,7 +1,7 @@
 #!/bin/bash
  
-sudo umount fs
-sudo losetup -D
-sudo rm -rf fs
+umount fs
+losetup -D
+rm -rf fs
 
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/so3/arch/arm32/context.S ./so3/arch/arm32/context.S
--- ../base/so3/so3/arch/arm32/context.S	2023-10-10 20:01:16.410180413 +0200
+++ ./so3/arch/arm32/context.S	2023-10-12 15:53:40.570091813 +0200
@@ -280,7 +280,7 @@
 	.equ welcome_len, . - .LC_welcome
 
 .LC_exec:
-	.string "sh.elf"
+	.string "stress.elf"
 
 .LCnoshell:
 	.string "so3: No init proc(shell) found ...\n"
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/so3/arch/arm64/context.S ./so3/arch/arm64/context.S
--- ../base/so3/so3/arch/arm64/context.S	2023-10-10 20:01:16.412180369 +0200
+++ ./so3/arch/arm64/context.S	2023-10-12 15:53:40.570091813 +0200
@@ -323,7 +323,7 @@
 	.equ welcome_len, . - .LC_welcome
 
 .LC_exec:
-	.string "sh.elf"
+	.string "stress.elf"
 
 .LCnoshell:
 	.string "so3: No init proc(shell) found ...\n"
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/so3/configs/virt64_defconfig ./so3/configs/virt64_defconfig
--- ../base/so3/so3/configs/virt64_defconfig	2023-10-10 20:01:16.414180324 +0200
+++ ./so3/configs/virt64_defconfig	2023-10-12 15:53:40.571091790 +0200
@@ -6,7 +6,7 @@
 CONFIG_ARCH_ARM64=y
 # CONFIG_SO3VIRT is not set
 CONFIG_ARCH="arm64"
-CONFIG_CROSS_COMPILE="aarch64-none-linux-gnu-"
+CONFIG_CROSS_COMPILE="aarch64-none-elf-"
 # CONFIG_ARM_TRUSTZONE is not set
 CONFIG_KERNEL_VADDR=0xffff800000000000
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/so3/devices/fb/pl111.c ./so3/devices/fb/pl111.c
--- ../base/so3/so3/devices/fb/pl111.c	2023-10-12 12:09:15.740292247 +0200
+++ ./so3/devices/fb/pl111.c	2023-10-12 15:53:40.571091790 +0200
@@ -105,11 +105,17 @@
 	addr_t page;
 	pcb_t *pcb = current()->pcb;
 
+	/* Just for doing some test with performance analysis */
+	virt_addr = malloc(page_count*PAGE_SIZE);
+	BUG_ON(!virt_addr);
+
+#if 0
 	for (i = 0; i < page_count; i++) {
 		/* Map a process' virtual page to the physical one (here the VRAM). */
 		page = LCDUPBASE + i * PAGE_SIZE;
 		create_mapping(pcb->pgtable, virt_addr + (i * PAGE_SIZE), page, PAGE_SIZE, false);
 	}
+#endif
 
 	__vaddr = virt_addr;
 
@@ -139,7 +145,7 @@
 }
 
 int fb_close(int fd) {
-	free((void *) __vaddr);
+	/* free((void *) __vaddr); */
 
 	return 0;
 }
@@ -179,7 +185,7 @@
 	base = (void *) io_map(fdt64_to_cpu(((const fdt64_t *) prop->data)[0]), fdt64_to_cpu(((const fdt64_t *) prop->data)[1]));
 
 #endif
-
+#if 0 /* lvgl */
 	/* Disable interrupts. */
 	iowrite32(base + CLCD_IENB, 0);
 
@@ -197,7 +203,7 @@
 
 	/* Configure, enable and power on the controller. */
 	iowrite32(base + CLCD_CNTL, WATERMARK | LCDVCOMP | LCDPWR | BEPO | BEBO | BGR | LCDDUAL | LCDMONO8 | LCDTFT | LCDBW | LCDBPP | LCDEN);
-
+#endif
 	/* Register the framebuffer so it can be accessed from user space. */
 	devclass_register(dev, &pl111_cdev);
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/so3/kernel/process.c ./so3/kernel/process.c
--- ../base/so3/so3/kernel/process.c	2023-10-10 20:01:16.437179814 +0200
+++ ./so3/kernel/process.c	2023-10-12 15:53:40.572091768 +0200
@@ -861,10 +861,27 @@
 	pcb_t *pcb;
 	unsigned i;
 
+	register int reg0 asm("r0");
+	register int reg1 asm("r1");
+
 	pcb = current()->pcb;
 
 	/* Never finish the root process */
 	if (pcb->parent == NULL) {
+#ifdef CONFIG_ARCH_ARM32
+		reg0 = 0x18;    /* SYSEXIT */
+		reg1 = 0x20026; /* ADP_Stopped_ApplicationExit */
+
+		asm("svc 0x00123456");  // make semihosting call
+#else
+		reg0 = 0x18;    /* SYSEXIT */
+		reg1 = 0x20026;
+
+		__asm__("hlt 0xf000");  // make semihosting call
+
+
+#endif
+
 		printk("<kernel> %s: cannot finish the root process ...\n", __func__);
 		kernel_panic();
 	}
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/st ./st
--- ../base/so3/st	2023-10-10 20:01:16.456179392 +0200
+++ ./st	2023-10-12 16:08:10.073165024 +0200
@@ -9,6 +9,18 @@
 QEMU_MAC_ADDR=`printf 'DE:AD:BE:EF:%02X:%02X\n' $(($RANDOM % 255)) $((N_QEMU_INSTANCES))`
 GDB_PORT=$(($GDB_PORT_BASE + $N_QEMU_INSTANCES))
 
+CHECKPERF_LOG="perf_check_$(date +"%Y_%m_%d_%I_%M_%S").log"
+
+# Post-installation
+if [ ! -f post_installation_done ]; then
+
+	cd filesystem
+	./create_img.sh virt64 && cd ..
+	cd rootfs && ./create_ramfs.sh virt64 && cd ..
+	./deploy.sh -bu
+	echo "OK" > post_installation_done
+
+fi
 
     echo -e "\033[01;36mMAC addr: " ${QEMU_MAC_ADDR} "\033[0;37m"
     echo -e "\033[01;36mGDB port: " ${GDB_PORT} "\033[0;37m"
@@ -21,18 +33,20 @@
 
     if [ "$PLATFORM" == "virt64" ]; then
 	echo Starting on ARM64
-    sudo qemu-system-aarch64 $@ ${USR_OPTION} \
+    qemu-system-aarch64 $@ ${USR_OPTION} \
  	-smp 4  \
-	-serial mon:stdio  \
 	-M virt -cpu cortex-a72  \
 	-device virtio-blk-device,drive=hd0 \
 	-drive if=none,file=filesystem/sdcard.img.virt64,id=hd0,format=raw,file.locking=off \
 	-m 1024 \
 	-kernel u-boot/u-boot \
-	-nographic \
-	-netdev tap,id=n1,script=scripts/qemu-ifup.sh,downscript=scripts/qemu-ifdown.sh \
-	-device virtio-net-device,netdev=n1,mac=${QEMU_MAC_ADDR} \
-        -gdb tcp::${GDB_PORT}
+	-nographic > /dev/null \
+	-icount shift=auto,sleep=off \
+	-semihosting \
+	-chardev stdio,id=char0,mux=on,logfile=${CHECKPERF_LOG},signal=off \
+	-serial chardev:char0  \
+	-mon chardev=char0
+
 
     else    
    echo Starting on ARM32
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/u-boot/configs/virt64_defconfig ./u-boot/configs/virt64_defconfig
--- ../base/so3/u-boot/configs/virt64_defconfig	2023-10-10 20:01:16.806171627 +0200
+++ ./u-boot/configs/virt64_defconfig	2023-10-12 15:53:40.572091768 +0200
@@ -4,7 +4,7 @@
 #
 
 #
-# Compiler: aarch64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
+# Compiler: aarch64-none-linux-gnu-gcc (Arm GNU Toolchain 11.3.Rel1) 11.3.1 20220712
 #
 CONFIG_CREATE_ARCH_SYMLINK=y
 CONFIG_SYS_CACHE_SHIFT_6=y
@@ -214,7 +214,7 @@
 CONFIG_LOCALVERSION=""
 CONFIG_LOCALVERSION_AUTO=y
 CONFIG_CC_IS_GCC=y
-CONFIG_GCC_VERSION=110400
+CONFIG_GCC_VERSION=110301
 CONFIG_CLANG_VERSION=0
 CONFIG_CC_OPTIMIZE_FOR_SIZE=y
 # CONFIG_OPTIMIZE_INLINING is not set
@@ -299,7 +299,7 @@
 # Autoboot options
 #
 CONFIG_AUTOBOOT=y
-CONFIG_BOOTDELAY=2
+CONFIG_BOOTDELAY=0
 # CONFIG_AUTOBOOT_KEYED is not set
 # CONFIG_AUTOBOOT_USE_MENUKEY is not set
 # CONFIG_USE_BOOTARGS is not set
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/u-boot/Makefile ./u-boot/Makefile
--- ../base/so3/u-boot/Makefile	2023-10-10 20:01:16.458179348 +0200
+++ ./u-boot/Makefile	2023-10-12 15:53:40.573091745 +0200
@@ -274,7 +274,7 @@
 
 ifeq ($(PLATFORM),$(filter $(PLATFORM),virt64))
 ARCH	= arm64
-CROSS_COMPILE = aarch64-none-linux-gnu-
+CROSS_COMPILE = aarch64-none-elf-
 endif
 
 ifeq ($(PLATFORM),$(filter $(PLATFORM),virt32 vexpress bbb))
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/aarch64_toolchain.cmake ./usr/aarch64_toolchain.cmake
--- ../base/so3/usr/aarch64_toolchain.cmake	2023-10-10 20:01:17.135164327 +0200
+++ ./usr/aarch64_toolchain.cmake	2023-10-12 15:53:40.574091722 +0200
@@ -17,13 +17,13 @@
 set(CMAKE_INSTALL_SO_NO_EXE 0)
 
 # This toolchain file can be used both inside and outside Buildroot.
-set(CMAKE_C_COMPILER "aarch64-none-linux-gnu-gcc")
-set(CMAKE_C_LINK_EXECUTABLE "aarch64-none-linux-gnu-ld <OBJECTS> -o <TARGET>  <LINK_LIBRARIES> <LINK_FLAGS> <LINK_LIBRARIES>")
-set(CMAKE_ASM_COMPILER "aarch64-none-linux-gnu-gcc")
+set(CMAKE_C_COMPILER "aarch64-none-elf-gcc")
+set(CMAKE_C_LINK_EXECUTABLE "aarch64-none-elf-ld <OBJECTS> -o <TARGET>  <LINK_LIBRARIES> <LINK_FLAGS> <LINK_LIBRARIES>")
+set(CMAKE_ASM_COMPILER "aarch64-none-elf-gcc")
 
 set(CMAKE_C_FLAGS "-Wall -O0 -std=c99  -D_GNU_SOURCE -nostdlib -O0 -pipe -Wall  -D__ARM64__  \
         -g -ffreestanding -fno-common")
  
 set(CMAKE_ASM_FLAGS_DEBUG "-D__ASSEMBLY__")
 
-set(CMAKE_LINKER "aarch64-none-linux-gnu-ld")
+set(CMAKE_LINKER "aarch64-none-elf-ld")
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/deploy.sh ./usr/deploy.sh
--- ../base/so3/usr/deploy.sh	2023-10-12 12:09:15.740292247 +0200
+++ ./usr/deploy.sh	2023-10-12 15:53:40.574091722 +0200
@@ -17,7 +17,7 @@
 
 cd ../rootfs
 ./mount.sh  ${PLATFORM}
-sudo cp -r ../usr/out/* fs
-sudo cp -r ../usr/build/deploy/* fs
+cp -r ../usr/out/* fs
+cp -r ../usr/build/deploy/* fs
 ./umount.sh  ${PLATFORM}
 
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/deploy.sh.orig ./usr/deploy.sh.orig
--- ../base/so3/usr/deploy.sh.orig	1970-01-01 01:00:00.000000000 +0100
+++ ./usr/deploy.sh.orig	2023-10-12 15:53:40.574091722 +0200
@@ -0,0 +1,23 @@
+#!/bin/bash
+
+if [ "$PLATFORM" == "" ]; then
+    if [ "$1" == "" ]; then  
+        echo "PLATFORM must be defined (virt32, virt64, rpi4, rpi4_64, so3virt)"
+        echo "You can invoke deploy.sh <platform>"
+        exit 0
+    fi
+    
+    PLATFORM=$1
+fi
+echo "Here: board is  ${PLATFORM}"
+echo "------------------- deploy usr apps in so3  ---------------"
+
+
+echo Deploying user apps into the ramfs partition
+
+cd ../rootfs
+./mount.sh  ${PLATFORM}
+sudo cp -r ../usr/out/* fs
+sudo cp -r ../usr/build/deploy/* fs
+./umount.sh  ${PLATFORM}
+
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/src/CMakeLists.txt ./usr/src/CMakeLists.txt
--- ../base/so3/usr/src/CMakeLists.txt	2023-10-12 15:47:03.099048017 +0200
+++ ./usr/src/CMakeLists.txt	2023-10-12 15:53:40.574091722 +0200
@@ -5,7 +5,6 @@
 add_executable(time.elf time.c)
 add_executable(ping.elf ping.c)
 
-add_subdirectory(widgets)
 add_subdirectory(stress)
 
 target_link_libraries(sh.elf c)
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/src/widgets/CMakeLists.txt ./usr/src/widgets/CMakeLists.txt
--- ../base/so3/usr/src/widgets/CMakeLists.txt	2023-10-10 20:01:17.516155874 +0200
+++ ./usr/src/widgets/CMakeLists.txt	2023-10-12 15:53:40.574091722 +0200
@@ -4,6 +4,10 @@
 #add_compile_options("-DLV_LVGL_H_INCLUDE_SIMPLE")
 
 add_compile_options("-DLV_USE_DEMO_WIDGETS") 
+
 add_executable(demofb.elf demofb.c lv_demo_widgets.c img_lvgl_logo.c img_demo_widgets_avatar.c img_clothes.c)
+add_executable(lvgl_perf.elf lvgl_perf.c lvgl_perf_drawing.c img_lvgl_logo.c)
+
 
-target_link_libraries(demofb.elf c lvgl)
\ No newline at end of file
+target_link_libraries(demofb.elf c lvgl)
+target_link_libraries(lvgl_perf.elf c lvgl)
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/src/widgets/demofb.c ./usr/src/widgets/demofb.c
--- ../base/so3/usr/src/widgets/demofb.c	2023-10-10 20:01:17.516155874 +0200
+++ ./usr/src/widgets/demofb.c	2023-10-12 15:53:40.574091722 +0200
@@ -55,7 +55,7 @@
 void *tick_routine(void *args)
 {
 	while (1) {
-		/* Tell LittlevGL that 1 millisecond were elapsed */
+		/* Tell LittlevGL that 5 milliseconds were elapsed */
 		usleep(1000);
 		lv_tick_inc(1);
 	}
@@ -72,7 +72,7 @@
 
 	drv.open_cb = fs_open_cb;		/* Callback to open a file */
 	drv.close_cb = fs_close_cb;		/* Callback to close a file */
-	drv.read_cb = fs_read_cb;
+	drv.read_cb = fs_read_cb;		/* Callback to read a file */
 	drv.seek_cb = fs_seek_cb;		/* Callback to seek in a file (Move cursor) */
 	drv.tell_cb = fs_tell_cb;		/* Callback to tell the cursor position */
 
@@ -154,8 +154,6 @@
 		return -1;
 	}
 
-	printf("Resolution: %d x %d\n", scr_hres, scr_vres);
-
 	/* Map the framebuffer into process memory. */
 	fbp = mmap(NULL, fb_size, 0, 0, fd, 0);
 	if (!fbp) {
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/src/widgets/lvgl_perf.c ./usr/src/widgets/lvgl_perf.c
--- ../base/so3/usr/src/widgets/lvgl_perf.c	1970-01-01 01:00:00.000000000 +0100
+++ ./usr/src/widgets/lvgl_perf.c	2023-10-12 15:53:40.575091699 +0200
@@ -0,0 +1,245 @@
+/*
+ * Copyright (C) 2020 Nikolaos Garanis <nikolaos.garanis@heig-vd.ch>
+ * Copyright (C) 2021 Daniel Rossier <daniel.rossier@heig-vd.ch>
+ *
+ * With the kind support and contribution of Gabor Kiss-Vamosi from LVGL. Thank You!
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+/*
+ * demo.c
+ *
+ * A more complete LittlevGL demo.
+ *
+ * Based on:
+ *  - https://github.com/littlevgl/lv_examples/blob/master/lv_tests/lv_test_theme/lv_test_theme_1.c
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <bits/ioctl_fix.h>
+#include <pthread.h>
+#include <time.h>
+#include <sys/time.h>
+
+#include <lvgl.h>
+
+
+#include "demofb.h"
+
+/* Screen resolution. */
+static uint32_t scr_hres, scr_vres, *fbp;
+
+/* File descriptor of the mouse and keyboard input device. */
+static int mfd;
+static int kfd;
+
+/* lvgl group for the keyboard. */
+static lv_group_t *keyboard_group;
+
+/* Tick routine for lvgl. */
+void *tick_routine(void *args)
+{
+	while (1) {
+		/* Tell LittlevGL that 5 milliseconds were elapsed */
+		usleep(1000);
+		lv_tick_inc(1);
+	}
+}
+
+/* File system driver initialisation. */
+void fs_init(void)
+{
+	static lv_fs_drv_t drv;
+	lv_fs_drv_init(&drv);
+
+	drv.letter = 'S';			/* An uppercase letter to identify the drive */
+	drv.ready_cb = fs_ready_cb;		/* Callback to tell if the drive is ready to use */
+
+	drv.open_cb = fs_open_cb;		/* Callback to open a file */
+	drv.close_cb = fs_close_cb;		/* Callback to close a file */
+	drv.read_cb = fs_read_cb;		/* Callback to read a file */
+	drv.seek_cb = fs_seek_cb;		/* Callback to seek in a file (Move cursor) */
+	drv.tell_cb = fs_tell_cb;		/* Callback to tell the cursor position */
+
+	lv_fs_drv_register(&drv);
+}
+
+bool fs_ready_cb(struct _lv_fs_drv_t *drv)
+{
+	return true;
+}
+
+void *fs_open_cb(struct _lv_fs_drv_t *drv, const char *path, lv_fs_mode_t mode)
+{
+	FILE *fp = fopen(path, (mode & LV_FS_MODE_WR) ? "w" : "r");
+	if (!fp) {
+		return NULL;
+	}
+
+	return fp;
+}
+
+lv_fs_res_t fs_close_cb(struct _lv_fs_drv_t *drv, void *file_p)
+{
+	if (0 != fclose(file_p)) {
+		return LV_FS_RES_UNKNOWN;
+	}
+
+	return LV_FS_RES_OK;
+}
+
+lv_fs_res_t fs_read_cb(struct _lv_fs_drv_t *drv, void *file_p, void *buf, uint32_t btr, uint32_t *br)
+{
+	*br = fread(buf, sizeof(uint8_t), btr, file_p);
+	return LV_FS_RES_OK;
+}
+
+lv_fs_res_t fs_seek_cb(struct _lv_fs_drv_t *drv, void *file_p, uint32_t pos, lv_fs_whence_t whence)
+{
+	if (0 != fseek(file_p, pos, SEEK_SET)) {
+		return LV_FS_RES_UNKNOWN;
+	}
+
+	return LV_FS_RES_OK;
+}
+
+lv_fs_res_t fs_tell_cb(struct _lv_fs_drv_t *drv, void *file_p, uint32_t *pos_p)
+{
+	*pos_p = ftell(file_p);
+	return LV_FS_RES_OK;
+}
+
+
+/*
+ * Framebuffer and display initialisation.
+ */
+int fb_init(void)
+{
+	int fd;
+	uint32_t fb_size;
+	static lv_disp_drv_t disp_drv;
+
+	/* LVGL will use this buffer to render the screen. See my_fb_cb. */
+	static lv_color_t buf[LVGL_BUF_SIZE];
+	static lv_disp_draw_buf_t disp_buf;
+
+	/* Get file descriptor. */
+	fd = open("/dev/fb0", 0);
+	if (-1 == fd) {
+		printf("Couldn't open framebuffer.\n");
+		return -1;
+	}
+
+	/* Get screen resolution. */
+	if (ioctl(fd, IOCTL_FB_HRES, &scr_hres)
+		|| ioctl(fd, IOCTL_FB_VRES, &scr_vres)
+		|| ioctl(fd, IOCTL_FB_SIZE, &fb_size)) {
+
+		printf("Couldn't get framebuffer resolution.\n");
+		return -1;
+	}
+
+	/* Map the framebuffer into process memory. */
+	fbp = mmap(NULL, fb_size, 0, 0, fd, 0);
+	if (!fbp) {
+		printf("Couldn't map framebuffer.\n");
+		return -1;
+	}
+
+	lv_disp_draw_buf_init(&disp_buf, buf, NULL, LVGL_BUF_SIZE);
+
+	/*
+	 * Initialisation and registration of the display driver.
+	 * Also setting the flush callback function (flush_cb) which will write
+	 * the lvgl buffer (buf) into our real framebuffer.
+	 */
+
+	lv_disp_drv_init(&disp_drv);
+	disp_drv.hor_res = scr_hres;
+	disp_drv.ver_res = scr_vres;
+	disp_drv.draw_buf = &disp_buf;
+	disp_drv.flush_cb = my_fb_cb;
+	lv_disp_drv_register(&disp_drv);
+
+	return 0;
+}
+
+/*
+ * Framebuffer callback. LVGL calls this function to redraw a screen area. If
+ * the buffer given to LVGL is smaller than the framebuffer, this function will
+ * be called multiple times until the whole screen has been redrawn. This is
+ * why we cannot use memcpy to redraw the whole region, we have to do it line
+ * by line.
+ *
+ * If the buffer is the size of the framebuffer, we could use memcpy for the
+ * whole region, but then SO3 would require more memory.
+ *
+ * https://docs.lvgl.io/latest/en/html/porting/display.html#display-buffer
+ */
+void my_fb_cb(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
+{
+	lv_coord_t y, w = lv_area_get_width(area);
+	uint32_t line_size = w * sizeof(lv_color_t);
+
+	for (y = area->y1; y <= area->y2; y++) {
+		memcpy(&fbp[y * scr_hres + area->x1], color_p, line_size);
+		color_p += w;
+	}
+
+	lv_disp_flush_ready(disp);
+}
+
+/* Main code. */
+
+int main(int argc, char **argv)
+{
+	pthread_t tick_thread;
+	struct timeval tv_start, tv_end;
+
+	/* Initialisation of lvgl. */
+	lv_init();
+	fs_init();
+
+	/* Initialisation of the framebuffer, mouse and keyboard. */
+	if (fb_init())
+		return -1;
+
+	gettimeofday(&tv_start, NULL);
+
+	/* Creating the UI. */
+	lv_demo_stress();
+
+	gettimeofday(&tv_end, NULL);
+
+	printf("## Elapsed time: %lld microseconds.\n", tv_end.tv_usec - tv_start.tv_usec);
+
+	/* LittlevGL needs to know how time passes by. */
+	if (pthread_create(&tick_thread, NULL, tick_routine, NULL) == -1) {
+		return -1;
+	}
+
+	/* LittlevGL has a set of tasks it needs to run every 5ms approx. */
+	while (1) {
+		lv_task_handler();
+		usleep(5000);
+	}
+
+	return 0;
+}
diff -x config -x scripts -x '*.o' -x '.*' -x so3_ci.patch -x generated -x '*.s' -x 'sdcard*' -Naru ../base/so3/usr/src/widgets/lvgl_perf_drawing.c ./usr/src/widgets/lvgl_perf_drawing.c
--- ../base/so3/usr/src/widgets/lvgl_perf_drawing.c	1970-01-01 01:00:00.000000000 +0100
+++ ./usr/src/widgets/lvgl_perf_drawing.c	2023-10-12 15:53:40.575091699 +0200
@@ -0,0 +1,133 @@
+/**
+ * @file lv_demo_widgets.c
+ *
+ */
+
+/*********************
+ *      INCLUDES
+ *********************/
+#include "lv_demo_widgets.h"
+
+
+#if LV_USE_BUILTIN_MALLOC && LV_MEM_SIZE < (38ul * 1024ul)
+    #error Insufficient memory for lv_demo_widgets. Please set LV_MEM_SIZE to at least 38KB (38ul * 1024ul).  48KB is recommended.
+#endif
+
+/*********************
+ *      DEFINES
+ *********************/
+
+/**********************
+ *      TYPEDEFS
+ **********************/
+typedef enum {
+    DISP_SMALL,
+    DISP_MEDIUM,
+    DISP_LARGE,
+} disp_size_t;
+
+
+
+/**********************
+ *  STATIC VARIABLES
+ **********************/
+static disp_size_t disp_size;
+
+static lv_obj_t * tv;
+static lv_obj_t * calendar;
+static lv_style_t style_text_muted;
+static lv_style_t style_title;
+static lv_style_t style_icon;
+static lv_style_t style_bullet;
+
+
+
+static const lv_font_t * font_large;
+static const lv_font_t * font_normal;
+
+static uint32_t session_desktop = 1000;
+static uint32_t session_tablet = 1000;
+static uint32_t session_mobile = 1000;
+
+/**********************
+ *      MACROS
+ **********************/
+
+/**********************
+ *   GLOBAL FUNCTIONS
+ **********************/
+
+void lv_demo_widgets(void)
+{
+    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
+    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
+    else disp_size = DISP_LARGE;
+
+    font_large = LV_FONT_DEFAULT;
+    font_normal = LV_FONT_DEFAULT;
+
+    lv_coord_t tab_h;
+    if(disp_size == DISP_LARGE) {
+        tab_h = 70;
+
+        font_large     = &lv_font_montserrat_24;
+
+
+        font_normal    = &lv_font_montserrat_16;
+
+    }
+    else if(disp_size == DISP_MEDIUM) {
+        tab_h = 45;
+
+        LV_LOG_WARN("LV_FONT_MONTSERRAT_20 is not enabled for the widgets demo. Using LV_FONT_DEFAULT instead.");
+        font_normal    = &lv_font_montserrat_14;
+
+    }
+    else {   /* disp_size == DISP_SMALL */
+        tab_h = 45;
+
+        font_large     = &lv_font_montserrat_18;
+        font_normal    = &lv_font_montserrat_12;
+
+    }
+
+#if LV_USE_THEME_DEFAULT
+    lv_theme_default_init(NULL, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK,
+                          font_normal);
+#endif
+
+    lv_style_init(&style_text_muted);
+    lv_style_set_text_opa(&style_text_muted, LV_OPA_50);
+
+    lv_style_init(&style_title);
+    lv_style_set_text_font(&style_title, font_large);
+
+    lv_style_init(&style_icon);
+    lv_style_set_text_color(&style_icon, lv_theme_get_color_primary(NULL));
+    lv_style_set_text_font(&style_icon, font_large);
+
+    lv_style_init(&style_bullet);
+    lv_style_set_border_width(&style_bullet, 0);
+    lv_style_set_radius(&style_bullet, LV_RADIUS_CIRCLE);
+
+    /*Create an array for the points of the line*/
+        static lv_point_t line_points[] = { {5, 5}, {70, 70}, {120, 10}, {180, 60}, {240, 10} };
+
+        /*Create style*/
+        static lv_style_t style_line;
+        lv_style_init(&style_line);
+        lv_style_set_line_width(&style_line, LV_STATE_DEFAULT, 8);
+        lv_style_set_line_color(&style_line, LV_STATE_DEFAULT, LV_COLOR_BLUE);
+        lv_style_set_line_rounded(&style_line, LV_STATE_DEFAULT, true);
+
+        /*Create a line and apply the new style*/
+        lv_obj_t * line1;
+        line1 = lv_line_create(lv_scr_act());
+        lv_line_set_points(line1, line_points, 5);     /*Set the points*/
+        lv_obj_add_style(line1, LV_LINE_PART_MAIN, &style_line);     /*Set the points*/
+        lv_obj_align(line1, LV_ALIGN_CENTER, 0, 0);
+
+
+}
+
+
